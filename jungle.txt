Quiero desarrollar una plataforma web que permita centralizar varios agentes autónomos, pensados y enfocados en resolver problemas dentro del sector logístico. Básicamente la plataforma debe de ser una suite de herramientas de AI capaces de ejecutar tareas por el usuario y para el usuario. La plataforma debe de funcionar de la siguiente manera:

Las personas que lleguen a nuestra plataforma verán una landing que les permitirá ver toda la información necesaria sobre nosotros, lo que hacemos y cómo lo hacemos, información sobre los planes para acceder a nuestros servicios y varios CTA's que permitirá al usuario solicitar un demo o agendar una cita con nuestros especialistas cuando lo deseen. 

Esta landing debe de tener un botón que permita a los usuarios redirigirse a la app web para hacer login en el caso de que ya sean usuarios o para hacer un registro en el caso de que estén adquiriendo el servicio por primera vez. 

En el caso del registro:
Cuando el usuario se registre deberá de llenar un formulario con toda la información de la empresa (es importante registrar o crear una entidad llamada empresa ya que esta plataforma está pensada para trabajar como un multitenant y cada usuario debe de estar atado a un tenant específico, la creación de esta entidad deberá de ser básica inicialmente y se completarán todas las configuraciones y todos menajes una vez que se haya completado todo el registro, incluido el pago desde la pasarela de pagos) a la que deberá de administrar una vez que todo haya terminado satisfactoriamente, cuando esta empresa sea registrada deberá de diligenciarse un formulario para obtener toda la información del usuario (acá debemos de llenar toda la información realmente relevante para poder tener un usuario master dentro de la empresa creada ya que recordemos que será este usuario quien tenga todos los permisos dentro de la empresa), al terminar, el sistema deberá de registrar a este usuario sin activarlo. Cuando el registro del usuario está "listo" y cuando el registro de la empresa está "listo" debemos de avanzar al área de facturación al que le debemos de pedir que elija el plan al que está accediendo y con base en ello hacer el cobro de dicho plan desde una pasarela de pagos. En el caso de que el pago sea exitoso debemos de terminar las configuraciones para el tenant (bases de datos, buckets, lo que sea que se deba de configurar para que funcione adecuadamente) y debemos de enviar emails al usuario indicándole que todo ha sido satisfactorio, que debemos de activar su cuenta y ya luego podrá hacer su login de forma normal. En el caso de que haya algún fallo en este momento deberá de manejarse todos los errores posibles para que el usuario pueda retomar el proceso con la mejor experiencia posible. Si el usuario llegara a abandonar el proceso por más de 1 hora entonces deberá de eliminarse toda la información guardada hasta el momento.

Adicional, debemos de manejar el flujo de forgot password, el cual deberá de enviar un código de seguridad al mail especificado por el usuario y si todo sale bien entonces llegará a la vista de reset password, donde deberá de crear la nueva contraseña y con el código de validación recibido podrá cambiar su contraseña para ir al login.

Debemos de tener un flujo de refresh token que sirva como fallback en caso de que nuestro actual access token haya expirado, así el usuario podrá solicitar un nuevo conjunto de tokens y volver a intentar la petición fallida por falta de permisos.

Debemos de tener un flujo de resend code en el caso de que el código de validación para el usuario no llegue a su correo por un error inesperado, así el usuario podrá solicitar un nuevo código y validar su usuario.

En el caso del login:
Cuando el usuario ingrese las credenciales correctas, la plataforma deberá navegar al menú principal dónde debería de poder ver todas las opciones disponibles para él.

En el caso de que haga login el usuario máster:
La plataforma no sólo deberá de mostrarle los agentes disponibles en la plataforma según el plan que haya adquirido al momento de la subscripción, sino que también deberá de mostrarle un módulo de gestión de usuarios, en el que debería de poder crear nuevos usuarios que serán parte de la empresa creada previamente. Desde este módulo de gestión de usuarios debería de poder crearlos, inactivarlos y darlos de baja. Al momento de crearlos el usuario para a ser miembro de la empresa, pero sin tener acceso a los módulos administrativos o de gestión, sino que únicamente tendrá acceso a los agentes disponibles según el plan adquirido.

Por otro lado, el usuario master también debería de tener acceso a un módulo que le permita gestionar su subscripción con opciones como cambiar en cualquier momento el plan seleccionado por cualquier otro plan disponible en la parrilla de planes disponibles (sea superior o inferior), también debe de tener la posibilidad de darse de baja si así lo desea. 

Debe haber un módulo de facturación que le permita ver el histórico de pagos mensuales realizados en la plataforma con la tarjeta registrada al inicio, así como una sección específica para cambiar el método de pago para que pueda cambiar la tarjeta si así lo desea. El usuario no debería de poder eliminar una tarjeta a menos que la reemplace por otra tarjeta que sea válida o en el caso de que haya cancelado la subscripción previamente.

En el caso de que el usuario máster cancele la subscripción, el sistema seguirá funcionando sin problema alguno hasta la siguiente fecha de corte (llámese fecha de corte a la fecha en la que se acaba el mes pagado y que debería de debitarse el pago del siguiente mes).

En el caso de que llegue la fecha de corte y la tarjeta registrada previamente no tenga los fondos suficientes para pagar la factura correspondiente o en el caso de que el usuario máster haya realizado una cancelación de la subscripción, el sistema será suspendido inmediatamente para todo usuario de la plataforma perteneciente a la empresa en cuestión.

En el caso de que el sistema sea suspendido, el único que tendrá acceso a la plataforma será el usuario máster y sólo tendrá acceso a los módulos de facturación y de gestión de subscripción.

En el caso de que haga login el usuario miembro de la empresa:
Este debería de poder ingresar y ver todos los agentes disponibles según el plan que el master haya contratado para la empresa.

Es muy importante tener como regla de oro de que este sistema es multitenant y que se debe de respetar en todo momento la integridad de los datos de cada cliente, por nada del mundo un usuario debería de ver la información de otro ni interactuar con la información de otro o ver los módulos de otro, todo esto es porque la información es completamente sensible así que es de vital importancia garantizar la seguridad y la integridad de los datos de cada empresa.

Al ingresar a la plataforma vamos a tener 2 agentes en la plataforma disponibles para los usuarios. Uno es el agente "feedo" y el otro es el agente "forecaster", la idea es ir creando más agentes en el tiempo e ir incluyéndolos dentro de la plataforma.

El agente feedo está pensado para que pueda manejar la ingesta de datos del usuario, feedo será quien alimente al sistema con la información que se necesita para funcionar adecuadamente, feedo deberá de mantener una conversación coherente y estable con el usuario, enfocada netamente en la ingesta de datos y nada más que eso, el usario debería de pedirle a feedo que le entregue las plantillas de datos disponibles para que el usuario pueda diligenciar cada plantilla según la necesidad.

Al recibir la plantilla feedo debería de poder identificar el tipo de plantilla que está recibiendo y el cliente al que pertenece, de esta forma almacenará la plantilla en el espacio reservado para el usuario en el bucket correspondiente y deberá de disparar un evento que inicie el procesamiento de la plantilla para hacer una normalización de datos y una vez que los datos como monedas, ciudades, fechas y otras nomenclaturas básicas estén organizados de la misma forma entonces feedo deberá de guardar todo esto en un formato que permita ser analizado luego. La idea es poder procesar y analizar realmente grandes volúmenes de datos en muy pocos segundos, hablamos de millones de datos, así que necesitamos estrategias avanzadas de procesamiento y de análisis de la información.

El agente forecaster es un agente que está pensado para analizar toda la información que feedo preparó previamente, es forecaster quien debe de tener toda la lógica de negocio para poder interactuar con el usuario únicamente de temas relacionado a la toma de decisiones sobre el inventario de la bodega haciendo predicciones de la demanda sobre el inventario y sacando reportes de información realmente relevante y robusta que permita a cualquier gerente una toma de decisiones informada y con bases fundamentadas en hechos. Forecaster debería de poder presentar la información en texto, en correos, o pintando un dashboard para ello. Forecaster debería de poder analizar millones de datos y aprender del comportamiento de los datos de una empresa en el tiempo para ayudar con predicciones y proyecciones que les ayuden a generar un impacto positivo en el inventario optimizando sus procesos.

A grandes rasgos esta es la descripción de la aplicación web que necesito construir en este momento y tú como desarrollador backend senior experto, con más de 10 años de experiencia en el desarrollo de aplicaciones enfocadas a ofrecer soluciones logísticas dentro del sector y con una amplia experiencia como arquitecto de soluciones dentro de AWS, debes de crear un roadmap completamente detallado y muy aterrizado en permita crear un MVP y así escalar de forma progresiva hasta llegar a la fase productiva con todo. 

Resumiendo todo:
Debes de recordar que los agentes feedo y forecaster ya están construidos y vamos a integrarlos, no es nuestra responsabilidad pesar en su funcionamiento. Pero si debemos de pensar en un flujo de registro robusto y exitoso que permita registrar al tenant, al usuario master y al método de pago, debemos de integrar una pasarela de pagos en este flujo y dentro de todo este registro de debemos de manejar cualquier posible error que se pueda generar. Cuando el usuario sea registrado, deberá de llegarlo un correo con la bienvenida al sistema y uno con los pasos a seguir para hacer su verificación de su usuario y así poder hacer login, esto significa que debemos de tener también un endpoint de resend code en el caso de que no le llegue el código de verificación a la primera. Debemos de poder manejar un flujo exitoso y de forgot y reset password, y finalmente, debemos de tener un flujo intuitivo de login. Una vez que el login se ha realizado satisfactoriamente debemos de consultar en nuestro back la información sobre el usuario que ha ingresado a la plataforma para poder identificarlo, con base en el usuario debemos de obtener el tenant al que está registrado y finalmente, con base en el tenant debemos de obtener el plan contratado y la fecha de corte del plan contratado (son subscripciones mensuales). En el caso de que llegue la fecha de corte y la subscripción se ha cancelado previamente o la tarjeta registrada no tiene fondos suficiente entonces debemos de suspender el servicio. En el caso de que el servicio sea suspendido, el único usuario del tenant que podrá ingresar a la plataforma es el usuario master y sólo tendrá acceso a los módulos "subscripción", "facturación" y "método de pago", con la finalidad de que vuelva a retomar el servicio. Los usuarios "members" sólo tendrán acceso a los agentes disponibles y nada más. El usuario máster deberá de tener acceso a un módulo de "gestión de usuario". Cuando un usuario, no importa el rol (master/member), ingrese a un agente (cualquier agente) debemos de ver una interfaz que nos permita crear una nueva conversación con el agente y en el panel lateral ver las conversaciones anteriores que se hayan desarrollado, la conversación deberá de ser fluida y en tiempo real.








